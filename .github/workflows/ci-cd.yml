name: PowerShell Module CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

jobs:
  test:
    name: Test PowerShell Module
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        powershell-version: ['5.1', '7.x']
        exclude:
          - os: ubuntu-latest
            powershell-version: '5.1'
          - os: macos-latest
            powershell-version: '5.1'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Install Pester
      shell: pwsh
      run: |
        Set-PSRepository PSGallery -InstallationPolicy Trusted
        Install-Module -Name Pester -Force -SkipPublisherCheck
        
    - name: Run Pester Tests
      shell: pwsh
      run: |
        $testResults = Invoke-Pester -Path './tests' -OutputFormat NUnitXml -OutputFile 'testResults.xml' -PassThru
        if ($testResults.FailedCount -gt 0) {
          throw "Tests failed"
        }
        
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-${{ matrix.os }}-ps${{ matrix.powershell-version }}
        path: testResults.xml

  code-analysis:
    name: Code Analysis
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Install PSScriptAnalyzer
      shell: pwsh
      run: |
        Set-PSRepository PSGallery -InstallationPolicy Trusted
        Install-Module -Name PSScriptAnalyzer -Force
        
    - name: Run PSScriptAnalyzer
      shell: pwsh
      run: |
        $analysisResults = Invoke-ScriptAnalyzer -Path './src' -Recurse -ReportSummary
        if ($analysisResults.Count -gt 0) {
          $analysisResults | Format-Table
          Write-Warning "PSScriptAnalyzer found $($analysisResults.Count) issues"
        }

  build:
    name: Build Module
    runs-on: ubuntu-latest
    needs: [test, code-analysis]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Test Module Manifest
      shell: pwsh
      run: |
        Test-ModuleManifest -Path './src/TemplateModule.psd1'
        
    - name: Create Build Artifact
      shell: pwsh
      run: |
        $buildPath = './build'
        New-Item -ItemType Directory -Path $buildPath -Force
        Copy-Item -Path './src/*' -Destination $buildPath -Recurse
        
    - name: Upload Build Artifact
      uses: actions/upload-artifact@v4
      with:
        name: TemplateModule
        path: ./build

  publish:
    name: Publish to GitHub Packages
    runs-on: ubuntu-latest
    needs: [build]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    permissions:
      contents: read
      packages: write
    
    steps:
    - name: Download Build Artifact
      uses: actions/download-artifact@v4
      with:
        name: TemplateModule
        path: ./module
      
    - name: Setup GitHub Packages Repository
      shell: pwsh
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        $repositoryName = 'GitHubPackages'
        $sourceLocation = 'https://nuget.pkg.github.com/${{ github.repository_owner }}/index.json'
        
        # Create credential for GitHub Packages
        $secureToken = ConvertTo-SecureString $env:GITHUB_TOKEN -AsPlainText -Force
        $credential = New-Object System.Management.Automation.PSCredential('${{ github.repository_owner }}', $secureToken)
        
        # Check if repository already exists and remove it
        $existingRepo = Get-PSRepository -Name $repositoryName -ErrorAction SilentlyContinue
        if ($existingRepo) {
          Unregister-PSRepository -Name $repositoryName -Force
        }
        
        # Register GitHub Packages as PowerShell repository
        Register-PSRepository -Name $repositoryName -SourceLocation $sourceLocation -PublishLocation $sourceLocation -InstallationPolicy Trusted
        
    - name: Publish Module to GitHub Packages
      shell: pwsh
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        NUGET_API_KEY: ${{ secrets.NUGET_API_KEY }}
      run: |
        # Debug: Check what's in the module directory
        Write-Host "üìÅ Contents of ./module directory:"
        Get-ChildItem -Path './module' -Recurse | ForEach-Object {
          Write-Host "  $($_.FullName)"
        }
        
        # Find the module manifest file
        $manifestPath = Get-ChildItem -Path './module' -Filter '*.psd1' -Recurse | Select-Object -First 1
        if ($manifestPath) {
          Write-Host "üì¶ Found module manifest: $($manifestPath.FullName)"
          $modulePath = $manifestPath.Directory.FullName
          Write-Host "üìÇ Module path: $modulePath"
        } else {
          Write-Error "‚ùå No module manifest (.psd1) file found in ./module"
          exit 1
        }
        
        # Check which tokens are available
        Write-Host "üîë Checking available authentication tokens..."
        if ($env:GITHUB_TOKEN) {
          Write-Host "‚úÖ GITHUB_TOKEN is available"
        } else {
          Write-Host "‚ùå GITHUB_TOKEN is not available"
        }
        
        if ($env:NUGET_API_KEY) {
          Write-Host "‚úÖ NUGET_API_KEY is available"
        } else {
          Write-Host "‚ùå NUGET_API_KEY is not available"
        }
        
        # Use NuGet API Key if available, otherwise fall back to GitHub Token
        $apiKey = if ($env:NUGET_API_KEY) { $env:NUGET_API_KEY } else { $env:GITHUB_TOKEN }
        
        if ($apiKey) {
          Write-Host "üì¶ Publishing module from path: $modulePath"
          try {
            Publish-Module -Path $modulePath -Repository 'GitHubPackages' -NuGetApiKey $apiKey -Verbose
            Write-Host "‚úÖ Module published successfully!"
          }
          catch {
            Write-Error "‚ùå Failed to publish module: $($_.Exception.Message)"
            throw
          }
        } else {
          Write-Error '‚ùå No authentication token found. Cannot publish.'
          exit 1
        }